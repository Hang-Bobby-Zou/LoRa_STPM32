<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [LoRa-STPM32\LoRa-STPM32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image LoRa-STPM32\LoRa-STPM32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jul 22 10:16:06 2020
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
McpsIndication &rArr; OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[3a]">TIM7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">HAL_TIM_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[5d]">BoardGetBatteryLevel</a> from board.o(i.BoardGetBatteryLevel) referenced from hal_loramac.o(i.LoRaMAC_Init)
 <LI><a href="#[9]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[23]">CAN1_RX0_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[24]">CAN1_RX1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[25]">CAN1_SCE_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[22]">CAN1_TX_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[40]">COMP_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[50]">CRS_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel4_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel5_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel6_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel7_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel4_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel5_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel6_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel7_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from gpio-board.o(i.EXTI0_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from gpio-board.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from gpio-board.o(i.EXTI1_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from gpio-board.o(i.EXTI2_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from gpio-board.o(i.EXTI3_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from gpio-board.o(i.EXTI4_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from gpio-board.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4f]">FPU_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[49]">I2C3_ER_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[48]">I2C3_EV_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4d]">LCD_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[41]">LPTIM1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[42]">LPTIM2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[46]">LPUART1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[59]">McpsConfirm</a> from hal_loramac.o(i.McpsConfirm) referenced from hal_loramac.o(i.LoRaMAC_Init)
 <LI><a href="#[5a]">McpsIndication</a> from hal_loramac.o(i.McpsIndication) referenced from hal_loramac.o(i.LoRaMAC_Init)
 <LI><a href="#[8]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[5b]">MlmeConfirm</a> from hal_loramac.o(i.MlmeConfirm) referenced from hal_loramac.o(i.LoRaMAC_Init)
 <LI><a href="#[5c]">MlmeIndication</a> from hal_loramac.o(i.MlmeIndication) referenced from hal_loramac.o(i.LoRaMAC_Init)
 <LI><a href="#[6]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[62]">OnAckTimeoutTimerEvent</a> from loramac_1.o(i.OnAckTimeoutTimerEvent) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[5e]">OnMacStateCheckTimerEvent</a> from loramac_1.o(i.OnMacStateCheckTimerEvent) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[64]">OnRadioRxDone</a> from loramac_1.o(i.OnRadioRxDone) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[65]">OnRadioRxError</a> from loramac_1.o(i.OnRadioRxError) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[67]">OnRadioRxTimeout</a> from loramac_1.o(i.OnRadioRxTimeout) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[63]">OnRadioTxDone</a> from loramac_1.o(i.OnRadioTxDone) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[66]">OnRadioTxTimeout</a> from loramac_1.o(i.OnRadioTxTimeout) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[60]">OnRxWindow1TimerEvent</a> from loramac_1.o(i.OnRxWindow1TimerEvent) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[61]">OnRxWindow2TimerEvent</a> from loramac_1.o(i.OnRxWindow2TimerEvent) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[5f]">OnTxDelayedTimerEvent</a> from loramac_1.o(i.OnTxDelayedTimerEvent) referenced from loramac_1.o(i.LoRaMacInitialization)
 <LI><a href="#[10]">PVD_PVM_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[47]">QUADSPI_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4e]">RNG_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from rtc-board.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[12]">RTC_WKUP_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4a]">SAI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[37]">SDMMC1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4b]">SWPMI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[79]">SX1276CheckRfFrequency</a> from sx1276-board.o(i.SX1276CheckRfFrequency) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[72]">SX1276GetStatus</a> from sx1276.o(i.SX1276GetStatus) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[7a]">SX1276GetTimeOnAir</a> from sx1276.o(i.SX1276GetTimeOnAir) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[88]">SX1276GetWakeupTime</a> from sx1276.o(i.SX1276GetWakeupTime) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[71]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[75]">SX1276IsChannelFree</a> from sx1276.o(i.SX1276IsChannelFree) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[0]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[1]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[2]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[3]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[4]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[68]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[76]">SX1276Random</a> from sx1276.o(i.SX1276Random) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[83]">SX1276Read</a> from sx1276.o(i.SX1276Read) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[85]">SX1276ReadBuffer</a> from sx1276.o(i.SX1276ReadBuffer) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[81]">SX1276ReadRssi</a> from sx1276.o(i.SX1276ReadRssi) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[7b]">SX1276Send</a> from sx1276.o(i.SX1276Send) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[74]">SX1276SetChannel</a> from sx1276.o(i.SX1276SetChannel) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[86]">SX1276SetMaxPayloadLength</a> from sx1276.o(i.SX1276SetMaxPayloadLength) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[73]">SX1276SetModem</a> from sx1276.o(i.SX1276SetModem) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[87]">SX1276SetPublicNetwork</a> from sx1276.o(i.SX1276SetPublicNetwork) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[7e]">SX1276SetRx</a> from sx1276.o(i.SX1276SetRx) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[77]">SX1276SetRxConfig</a> from sx1276.o(i.SX1276SetRxConfig) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[7c]">SX1276SetSleep</a> from sx1276.o(i.SX1276SetSleep) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[7d]">SX1276SetStby</a> from sx1276.o(i.SX1276SetStby) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[78]">SX1276SetTxConfig</a> from sx1276.o(i.SX1276SetTxConfig) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[80]">SX1276SetTxContinuousWave</a> from sx1276.o(i.SX1276SetTxContinuousWave) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[7f]">SX1276StartCad</a> from sx1276.o(i.SX1276StartCad) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[82]">SX1276Write</a> from sx1276.o(i.SX1276Write) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[84]">SX1276WriteBuffer</a> from sx1276.o(i.SX1276WriteBuffer) referenced from sx1276-board.o(.constdata)
 <LI><a href="#[6c]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[70]">StartSPI2</a> from freertos.o(i.StartSPI2) referenced from freertos.o(.constdata)
 <LI><a href="#[6e]">StartUSART1</a> from freertos.o(i.StartUSART1) referenced from freertos.o(.constdata)
 <LI><a href="#[6f]">StartUSART3</a> from freertos.o(i.StartUSART3) referenced from freertos.o(.constdata)
 <LI><a href="#[e]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[52]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l433xx.o(.text)
 <LI><a href="#[11]">TAMP_STAMP_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[28]">TIM1_UP_TIM16_IRQHandler</a> from stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[39]">TIM6_DAC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3a]">TIM7_IRQHandler</a> from stm32l4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4c]">TSC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[54]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[55]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[56]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[57]">UART_TxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[58]">UART_TxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[32]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[43]">USB_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[53]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l433xx.o(.text)
 <LI><a href="#[69]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[6d]">defaultIDLE</a> from freertos.o(i.defaultIDLE) referenced from freertos.o(.constdata)
 <LI><a href="#[51]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6b]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[89]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[215]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[216]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[217]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[218]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[219]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[209]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1dd]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetRFFrequency
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetRFFrequency
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetRFFrequency
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[221]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[222]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[223]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[94]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9e]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[225]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>AES_CMAC_Final</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[a5]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[a6]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[a8]"></a>AES_CMAC_Update</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[1c1]"></a>BoardDisableIrq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.BoardDisableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1c3]"></a>BoardEnableIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.BoardEnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[5d]"></a>BoardGetBatteryLevel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.BoardGetBatteryLevel))
<BR>[Address Reference Count : 1]<UL><LI> hal_loramac.o(i.LoRaMAC_Init)
</UL>
<P><STRONG><a name="[122]"></a>BoardGetRandomSeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(i.BoardGetRandomSeed))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Join
</UL>

<P><STRONG><a name="[11e]"></a>BoardInitMcu</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, board.o(i.BoardInitMcu))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Init
</UL>

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>CalcPrint_Active_Energy</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_Active_Energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_Active_Energy &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[b4]"></a>CalcPrint_Active_Pwr</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_Active_Pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_Active_Pwr &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[b5]"></a>CalcPrint_App_Energy</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_App_Energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_App_Energy &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[b6]"></a>CalcPrint_App_RMS_Pwr</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_App_RMS_Pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_App_RMS_Pwr &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[b7]"></a>CalcPrint_C1_RMS</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, freertos.o(i.CalcPrint_C1_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalcPrint_C1_RMS &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[b8]"></a>CalcPrint_Freq</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_Freq &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[bb]"></a>CalcPrint_Phase</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, freertos.o(i.CalcPrint_Phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CalcPrint_Phase &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[bc]"></a>CalcPrint_React_Energy</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_React_Energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_React_Energy &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[bd]"></a>CalcPrint_React_Pwr</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_React_Pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_React_Pwr &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[be]"></a>CalcPrint_Tot_App_Energy</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_Tot_App_Energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_Tot_App_Energy &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[bf]"></a>CalcPrint_V1_RMS</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, freertos.o(i.CalcPrint_V1_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CalcPrint_V1_RMS &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DelayMs &rArr; DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[c8]"></a>DelayMsMcu</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay-board.o(i.DelayMsMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>Error_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Error_Handler &rArr; myprintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_PCD_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[cc]"></a>FifoPop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fifo.o(i.FifoPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[ce]"></a>FifoPush</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fifo.o(i.FifoPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_SX1276_Rx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_gpio.o(i.GPIO_SX1276_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SX1276_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_SX1276_Tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_gpio.o(i.GPIO_SX1276_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SX1276_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>

<P><STRONG><a name="[d2]"></a>GpioMcuWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio-board.o(i.GpioMcuWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>

<P><STRONG><a name="[d3]"></a>GpioWrite</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio.o(i.GpioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[10c]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgOnly
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMsgOnly
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
</UL>

<P><STRONG><a name="[d5]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio-board.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_end_wr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_begin_wr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SX1276_Tx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SX1276_Rx
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[107]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d6]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>HAL_InitTick</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, stm32l4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[d7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_pcd_ex.o(i.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_PCD_Init</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32l4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_PCD_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[168]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 970 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ed]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f1]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1878 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SPI_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_SPI_Receive</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
</UL>

<P><STRONG><a name="[fa]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_end_wr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_begin_wr
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_InOut
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM7_IRQHandler &rArr;  HAL_TIM_IRQHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; TIM7_IRQHandler &rArr;  HAL_TIM_IRQHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_UART_MspInit</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgOnly
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMsgOnly
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[114]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[116]"></a>HAL_UART_SendBytes</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(i.HAL_UART_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_SendBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_GET_FLAG
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgOnly
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMsgOnly
</UL>

<P><STRONG><a name="[11c]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[117]"></a>HAL_USART_GET_FLAG</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.HAL_USART_GET_FLAG))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_SendBytes
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HardFault_Handler &rArr; myprintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>IsFifoEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.IsFifoEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[115]"></a>IsFifoFull</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fifo.o(i.IsFifoFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsFifoFull &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[11d]"></a>LoRaMAC_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, hal_loramac.o(i.LoRaMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LoRaMAC_Init &rArr; LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
</UL>

<P><STRONG><a name="[121]"></a>LoRaMAC_Join</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hal_loramac.o(i.LoRaMAC_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LoRaMAC_Join &rArr; LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetRandomSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Send
</UL>

<P><STRONG><a name="[125]"></a>LoRaMAC_Send</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, hal_loramac.o(i.LoRaMAC_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = LoRaMAC_Send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Join
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
</UL>

<P><STRONG><a name="[129]"></a>LoRaMacComputeMic</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[11f]"></a>LoRaMacInitialization</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, loramac_1.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Init
</UL>

<P><STRONG><a name="[131]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[132]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacJoinComputeSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[133]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[128]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, loramac_1.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFPortAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Send
</UL>

<P><STRONG><a name="[126]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, loramac_1.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>

<P><STRONG><a name="[120]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 760 bytes, Stack size 32 bytes, loramac_1.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Join
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[13b]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, loramac_1.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[13f]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, loramaccrypto.o(i.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[140]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[127]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, loramac_1.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRaMacQueryTxPossible &rArr; RegionAdrNext &rArr; RegionCN470AdrNext &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Send
</UL>

<P><STRONG><a name="[143]"></a>LoRa_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lora.o(i.LoRa_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LoRa_Init &rArr; LoRa_SetOpMode &rArr; LoRa_ReadReg &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_is_detected
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetRFFrequency
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetOpMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetFskMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>LoRa_ReadReg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lora.o(i.LoRa_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRa_ReadReg &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_is_detected
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetOpMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetFskMode
</UL>

<P><STRONG><a name="[146]"></a>LoRa_SetFskMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora.o(i.LoRa_SetFskMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LoRa_SetFskMode &rArr; LoRa_ReadReg &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[145]"></a>LoRa_SetOpMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora.o(i.LoRa_SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LoRa_SetOpMode &rArr; LoRa_ReadReg &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[148]"></a>LoRa_SetRFFrequency</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lora.o(i.LoRa_SetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRa_SetRFFrequency &rArr; LoRa_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[147]"></a>LoRa_WriteReg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lora.o(i.LoRa_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoRa_WriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetRFFrequency
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetOpMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SetFskMode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[144]"></a>LoRa_is_detected</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lora.o(i.LoRa_is_detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRa_is_detected &rArr; LoRa_ReadReg &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_ReadReg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[14a]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 144 bytes, Stack size 152 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>MX_GPIO_Init</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, hal_gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>MX_SPI1_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>MX_SPI2_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hal_spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>MX_TIM6_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>MX_TIM7_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tim.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_USB_PCD_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb.o(i.MX_USB_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_USB_PCD_Init &rArr; Error_Handler &rArr; myprintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>PrepareFrame</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, loramac_1.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc-board.o(i.RTC_Alarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>ReadMsgOnly</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stpm32.o(i.ReadMsgOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadMsgOnly &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteReverse
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[141]"></a>RegionAdrNext</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, region.o(i.RegionAdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionAdrNext &rArr; RegionCN470AdrNext &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[13c]"></a>RegionAlternateDr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAlternateDr
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[15b]"></a>RegionApplyCFList</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionApplyCFList
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[16e]"></a>RegionApplyDrOffset</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionApplyDrOffset &rArr; RegionCN470ApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[16b]"></a>RegionCN470AdrNext</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, regioncn470.o(i.RegionCN470AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCN470AdrNext &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[16c]"></a>RegionCN470AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[16d]"></a>RegionCN470ApplyCFList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470ApplyCFList))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[16f]"></a>RegionCN470ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[171]"></a>RegionCN470CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regioncn470.o(i.RegionCN470CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCN470CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[173]"></a>RegionCN470ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[175]"></a>RegionCN470ComputeRxWindowParameters</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, regioncn470.o(i.RegionCN470ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[18f]"></a>RegionCN470DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[170]"></a>RegionCN470GetPhyParam</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AdrNext
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[17a]"></a>RegionCN470InitDefaults</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[17b]"></a>RegionCN470LinkAdrReq</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, regioncn470.o(i.RegionCN470LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[190]"></a>RegionCN470NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[17e]"></a>RegionCN470NextChannel</STRONG> (Thumb, 194 bytes, Stack size 136 bytes, regioncn470.o(i.RegionCN470NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[192]"></a>RegionCN470RxConfig</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, regioncn470.o(i.RegionCN470RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionCN470RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[181]"></a>RegionCN470RxParamSetupReq</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[182]"></a>RegionCN470SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[184]"></a>RegionCN470SetContinuousWave</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, regioncn470.o(i.RegionCN470SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionCN470SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[187]"></a>RegionCN470TxConfig</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, regioncn470.o(i.RegionCN470TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[195]"></a>RegionCN470TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[188]"></a>RegionCN470Verify</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[c2]"></a>RegionCalcBackOff</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCalcBackOff &rArr; RegionCN470CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[13a]"></a>RegionChanMaskSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionChanMaskSet &rArr; RegionCN470ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[172]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470CalcBackOff
</UL>

<P><STRONG><a name="[174]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
</UL>

<P><STRONG><a name="[18a]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[178]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 318 bytes, Stack size 80 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[177]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[186]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
</UL>

<P><STRONG><a name="[17f]"></a>RegionCommonCountChannels</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[189]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[17d]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 156 bytes, Stack size 44 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>

<P><STRONG><a name="[17c]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>

<P><STRONG><a name="[183]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
</UL>

<P><STRONG><a name="[180]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[c6]"></a>RegionCommonValueInRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
</UL>

<P><STRONG><a name="[137]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[167]"></a>RegionDlChannelReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionDlChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[12b]"></a>RegionGetPhyParam</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[12c]"></a>RegionInitDefaults</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionInitDefaults &rArr; RegionCN470InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[12a]"></a>RegionIsActive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[163]"></a>RegionLinkAdrReq</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionLinkAdrReq &rArr; RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[165]"></a>RegionNewChannelReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionNewChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[191]"></a>RegionNextChannel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[15e]"></a>RegionRxConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[164]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionCN470RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[15d]"></a>RegionSetBandTxDone</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionSetBandTxDone &rArr; RegionCN470SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[193]"></a>RegionSetContinuousWave</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionSetContinuousWave &rArr; RegionCN470SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[194]"></a>RegionTxConfig</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[166]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[135]"></a>RegionVerify</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionVerify &rArr; RegionCN470Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[196]"></a>RtcComputeElapsedTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc-board.o(i.RtcComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcComputeElapsedTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[1c0]"></a>RtcGetAdjustedTimeoutValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetAdjustedTimeoutValue))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[198]"></a>RtcGetElapsedAlarmTime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtc-board.o(i.RtcGetElapsedAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
</UL>

<P><STRONG><a name="[197]"></a>RtcGetTimerValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc-board.o(i.RtcGetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_GetTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
</UL>

<P><STRONG><a name="[c9]"></a>RtcRecoverMcuStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc-board.o(i.RtcRecoverMcuStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>RtcSetTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtc-board.o(i.RtcSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcSetTimeout &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[19c]"></a>SPI2_InOut</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hal_spi.o(i.SPI2_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[19f]"></a>STPM32_Init</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, stpm32.o(i.STPM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STPM32_Init &rArr; SendMsgOnly &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgOnly
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-board.o(i.SX1276AntSwDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[1ad]"></a>SX1276AntSwInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-board.o(i.SX1276AntSwInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[79]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276-board.o(i.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>SX1276GetBoardTcxoWakeupTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276-board.o(i.SX1276GetBoardTcxoWakeupTime))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetWakeupTime
</UL>

<P><STRONG><a name="[1b0]"></a>SX1276GetPaSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sx1276-board.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[72]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276GetTimeOnAir &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>SX1276GetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetBoardTcxoWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>SX1276Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>SX1276IoIrqInit</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, hal_gpio.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276IoIrqInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[75]"></a>SX1276IsChannelFree</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[0]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 892 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276OnDio0Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276OnDio1Irq &rArr; SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX1276OnDio2Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX1276OnTimeoutIrq &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[76]"></a>SX1276Random</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>SX1276ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276ReadBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[81]"></a>SX1276ReadRssi</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>SX1276Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx1276-board.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276Reset &rArr; DelayMs &rArr; DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBoardTcxo
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[7b]"></a>SX1276Send</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>SX1276SetAntSw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx1276-board.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276SetAntSw &rArr; GPIO_SX1276_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SX1276_Tx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SX1276_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[1ac]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, sx1276-board.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SX1276SetAntSwLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[74]"></a>SX1276SetChannel</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>SX1276SetModem</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>SX1276SetOpMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[87]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, sx1276-board.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[7e]"></a>SX1276SetRx</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX1276SetRx &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>SX1276SetRxConfig</STRONG> (Thumb, 810 bytes, Stack size 104 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>SX1276SetSleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>SX1276SetStby</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>SX1276SetTx</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[78]"></a>SX1276SetTxConfig</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, sx1276.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>SX1276StartCad</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>SX1276WriteBuffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276-board.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[136]"></a>Send</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, loramac_1.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1b2]"></a>SendFrameOnChannel</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, loramac_1.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1a0]"></a>SendMsgOnly</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, stpm32.o(i.SendMsgOnly))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SendMsgOnly &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteReverse
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
</UL>

<P><STRONG><a name="[13d]"></a>SetTxContinuousWave</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, loramac_1.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SetTxContinuousWave &rArr; RegionSetContinuousWave &rArr; RegionCN470SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[13e]"></a>SetTxContinuousWave1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramac_1.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetTxContinuousWave1 &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1a8]"></a>SpiInOut</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, spi-board.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_InOut
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[6c]"></a>StartDefaultTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartDefaultTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>StartSPI2</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, freertos.o(i.StartSPI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = StartSPI2 &rArr; LoRaMAC_Send &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Join
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>StartUSART1</STRONG> (Thumb, 628 bytes, Stack size 0 bytes, freertos.o(i.StartUSART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = StartUSART1 &rArr; CalcPrint_Phase &rArr; ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMsgOnly
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_cpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>StartUSART3</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, freertos.o(i.StartUSART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = StartUSART3 &rArr; ext_flash_read &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>SystemClock_Config</STRONG> (Thumb, 210 bytes, Stack size 192 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; TIM7_IRQHandler &rArr;  HAL_TIM_IRQHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>TIM7_GetTimeMs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tim.o(i.TIM7_GetTimeMs))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>

<P><STRONG><a name="[3a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = TIM7_IRQHandler &rArr;  HAL_TIM_IRQHandler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[130]"></a>TimerGetCurrentTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerGetCurrentTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[c1]"></a>TimerGetElapsedTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[1bd]"></a>TimerGetValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.TimerGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[12e]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[12f]"></a>TimerSetValue</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[159]"></a>TimerStart</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, timer.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[c4]"></a>TimerStop</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, timer.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckToDisableAckTimeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[112]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[113]"></a>UART_CheckIdleState</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[111]"></a>UART_SetConfig</STRONG> (Thumb, 972 bytes, Stack size 40 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[119]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>USART3_PINSET_RX</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(i.USART3_PINSET_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_PINSET_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[b0]"></a>USART3_PINSET_TX</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(i.USART3_PINSET_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_PINSET_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[e6]"></a>USB_CoreInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[ea]"></a>USB_DevDisconnect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e8]"></a>USB_DevInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[e4]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1c5]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[e7]"></a>USB_SetCurrentMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[228]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[229]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[22a]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1dc]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
</UL>

<P><STRONG><a name="[18b]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[18d]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[1a1]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[22b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[22d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a3]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[a7]"></a>aes_set_key</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[6d]"></a>defaultIDLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertos.o(i.defaultIDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = defaultIDLE &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>ext_flash_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ext_flash.o(i.ext_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ext_flash_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>ext_flash_last_write_or_erase_done</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ext_flash.o(i.ext_flash_last_write_or_erase_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
</UL>

<P><STRONG><a name="[1d4]"></a>ext_flash_power_on</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ext_flash.o(i.ext_flash_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ext_flash_power_on &rArr; myprintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>ext_flash_read</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ext_flash.o(i.ext_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ext_flash_read &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
</UL>

<P><STRONG><a name="[ae]"></a>ext_flash_write</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ext_flash.o(i.ext_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ext_flash_write &rArr; ext_flash_last_write_or_erase_done &rArr; flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_end_wr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_begin_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
</UL>

<P><STRONG><a name="[51]"></a>main</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_PCD_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a4]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[161]"></a>memcpyr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilities.o(i.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[a2]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilities.o(i.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[b1]"></a>myprintf</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usart.o(i.myprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = myprintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_TX
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PINSET_RX
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_SendBytes
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_is_detected
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STPM32_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_power_on
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_wr_rd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_end_wr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_begin_wr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_V1_RMS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Tot_App_Energy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Pwr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_React_Energy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Phase
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Freq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_C1_RMS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_RMS_Pwr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_App_Energy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Pwr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPrint_Active_Energy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Send
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultIDLE
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[1da]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>osSemaphoreCreate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[14c]"></a>osThreadCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1fe]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[210]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1f7]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[203]"></a>rand1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utilities.o(i.rand1))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[124]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Join
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>

<P><STRONG><a name="[123]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_Join
</UL>

<P><STRONG><a name="[1b6]"></a>uint8_cpy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, freertos.o(i.uint8_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uint8_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[1e6]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1b4]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(i.uxTaskPriorityGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxTaskPriorityGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSPI2
</UL>

<P><STRONG><a name="[206]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1f8]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1f6]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1e8]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1e7]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1ea]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ec]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1f1]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[208]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b5]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUSART1
</UL>

<P><STRONG><a name="[20c]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1fd]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[204]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[205]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1de]"></a>vTaskStartScheduler</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1ff]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[8b]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[207]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d3]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_init
</UL>

<P><STRONG><a name="[1e0]"></a>xQueueGenericCreate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[1df]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[1f4]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1e1]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[1d7]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_read
</UL>

<P><STRONG><a name="[20f]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[1d6]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_read
</UL>

<P><STRONG><a name="[20d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1e4]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1e3]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[20e]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[20b]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b8]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f0]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[211]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1fc]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[202]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d8]"></a>flash_ext_begin_wr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ext_flash.o(i.flash_ext_begin_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_ext_begin_wr &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
</UL>

<P><STRONG><a name="[1d9]"></a>flash_ext_end_wr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ext_flash.o(i.flash_ext_end_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_ext_end_wr &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
</UL>

<P><STRONG><a name="[1d5]"></a>flash_ext_wr_rd</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ext_flash.o(i.flash_ext_wr_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = flash_ext_wr_rd &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_last_write_or_erase_done
</UL>

<P><STRONG><a name="[ab]"></a>CalcCRC8</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stpm32.o(i.CalcCRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcCRC8 &rArr; Crc8Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc8Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgOnly
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMsgOnly
</UL>

<P><STRONG><a name="[ac]"></a>Crc8Calc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stpm32.o(i.Crc8Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc8Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC8
</UL>

<P><STRONG><a name="[16a]"></a>byteReverse</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stpm32.o(i.byteReverse))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgOnly
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMsgOnly
</UL>

<P><STRONG><a name="[59]"></a>McpsConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_loramac.o(i.McpsConfirm))
<BR>[Address Reference Count : 1]<UL><LI> hal_loramac.o(i.LoRaMAC_Init)
</UL>
<P><STRONG><a name="[5a]"></a>McpsIndication</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, hal_loramac.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = McpsIndication &rArr; OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_loramac.o(i.LoRaMAC_Init)
</UL>
<P><STRONG><a name="[5b]"></a>MlmeConfirm</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, hal_loramac.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = MlmeConfirm &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_loramac.o(i.LoRaMAC_Init)
</UL>
<P><STRONG><a name="[5c]"></a>MlmeIndication</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_loramac.o(i.MlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MlmeIndication &rArr; OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_loramac.o(i.LoRaMAC_Init)
</UL>
<P><STRONG><a name="[156]"></a>OnTxNextPacketTimerEvent</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, hal_loramac.o(i.OnTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[f2]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ec]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e0]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e1]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f9]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[fb]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[19e]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[19d]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[54]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[10b]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[56]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[57]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[58]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[1ef]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[212]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1f2]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1f3]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1f9]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1fa]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1fb]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1e5]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1e9]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ed]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1ee]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6b]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1f5]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1eb]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[213]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1e2]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[200]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[201]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6a]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a9]"></a>AddMacCommand</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, loramac_1.o(i.AddMacCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddMacCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[c0]"></a>CalculateBackOff</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loramac_1.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CalculateBackOff &rArr; RegionCalcBackOff &rArr; RegionCN470CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[c3]"></a>CheckToDisableAckTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, loramac_1.o(i.CheckToDisableAckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckToDisableAckTimeout &rArr; TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[134]"></a>IsFPortAllowed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loramac_1.o(i.IsFPortAllowed))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[158]"></a>IsStickyMacCommandPending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramac_1.o(i.IsStickyMacCommandPending))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[62]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac_1.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[5e]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 880 bytes, Stack size 16 bytes, loramac_1.o(i.OnMacStateCheckTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStickyMacCommandPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[64]"></a>OnRadioRxDone</STRONG> (Thumb, 1684 bytes, Stack size 136 bytes, loramac_1.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = OnRadioRxDone &rArr; ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckToDisableAckTimeout
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[65]"></a>OnRadioRxError</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, loramac_1.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OnRadioRxError &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[67]"></a>OnRadioRxTimeout</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, loramac_1.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OnRadioRxTimeout &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[63]"></a>OnRadioTxDone</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, loramac_1.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OnRadioTxDone &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[66]"></a>OnRadioTxTimeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac_1.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OnRadioTxTimeout &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[60]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, loramac_1.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[61]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, loramac_1.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[5f]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramac_1.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac_1.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[138]"></a>OpenContinuousRx2Window</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, loramac_1.o(i.OpenContinuousRx2Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[162]"></a>ParseMacCommandsToRepeat</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, loramac_1.o(i.ParseMacCommandsToRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParseMacCommandsToRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[15a]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loramac_1.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PrepareRxDoneAbort &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[15c]"></a>ProcessMacCommands</STRONG> (Thumb, 874 bytes, Stack size 64 bytes, loramac_1.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[12d]"></a>ResetMacParameters</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, loramac_1.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionCN470InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[15f]"></a>RxWindowSetup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramac_1.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[157]"></a>ScheduleTx</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, loramac_1.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[aa]"></a>SetMlmeScheduleUplinkIndication</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramac_1.o(i.SetMlmeScheduleUplinkIndication))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
</UL>

<P><STRONG><a name="[142]"></a>ValidatePayloadLength</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, loramac_1.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ValidatePayloadLength &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[c5]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, regioncn470.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[176]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regioncn470.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[179]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncn470.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>

<P><STRONG><a name="[185]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioncn470.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
</UL>

<P><STRONG><a name="[18e]"></a>CountChannels</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, regioncommon.o(i.CountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>

<P><STRONG><a name="[1b1]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[19b]"></a>RxChainCalibration</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut &rArr; SPI2_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[cd]"></a>FifoNext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fifo.o(i.FifoNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>

<P><STRONG><a name="[1c2]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1be]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1c4]"></a>TimerInsertTimer</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, timer.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1bf]"></a>TimerSetTimeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcGetTimerValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAdjustedTimeoutValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[1cc]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1ce]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1db]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[1d1]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[1cf]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1d0]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1cd]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[1a9]"></a>SX1276SetBoardTcxo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-board.o(i.SX1276SetBoardTcxo))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[1c8]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[69]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
